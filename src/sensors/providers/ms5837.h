#pragma once

#include "sensors/depth/modular.h"
#include <Wire.h>
#include "utils.h"
#include <MS5837.h>


#define TEMP_IS_ACTUAL   (1 << 0)
#define DEPTH_IS_ACTUAL  (1 << 1)


class MS5837Provider : public IDepthProvider, public ITemperatureProvider {
private:
    MS5837 sensor;
    int sda, scl;
    bool initialized = false;
    uint8_t data_is_actual = 0;
    unsigned long lastReadTime = 0;
    const unsigned long READ_INTERVAL = 100; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —á—Ç–µ–Ω–∏—è–º–∏ (–º—Å)

    // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã I2C –æ–ø–µ—Ä–∞—Ü–∏–π
    static SemaphoreHandle_t i2cMutex;
    static MS5837Provider* _instance;
    static bool wireInitialized;

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    bool safeRead() {
        if (!initialized) {
            uartDebug("‚ùå MS5837 not initialized");
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —á—Ç–µ–Ω–∏—è–º–∏
        unsigned long currentTime = millis();
        if (currentTime - lastReadTime < READ_INTERVAL) {
            return true; // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        }

        // –ü–æ–ª—É—á–∞–µ–º –º—å—é—Ç–µ–∫—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        if (xSemaphoreTake(i2cMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
            uartDebug("‚ùå Failed to acquire I2C mutex");
            return false;
        }

        bool success = false;
        int attempts = 3;

        while (attempts-- > 0 && !success) {
            try {
                // MS5837::read() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç void, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º
                sensor.read();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                float temp = sensor.temperature();
                float pressure = sensor.pressure();

                // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö, —Å—á–∏—Ç–∞–µ–º —á—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–º
                if (temp > -50.0f && temp < 100.0f && pressure > 0 && pressure < 20000.0f) {
                    success = true;
                    lastReadTime = currentTime;
                    data_is_actual = TEMP_IS_ACTUAL | DEPTH_IS_ACTUAL;
                } else {
                    uartDebug("‚ùå MS5837 read returned invalid values");
                    delay(50);
                }
            } catch (...) {
                uartDebug("‚ùå MS5837 read exception, retrying...");
                delay(50);
            }
        }

        xSemaphoreGive(i2cMutex);

        if (!success) {
            uartDebug("‚ùå MS5837 read failed after all attempts");
        }

        return success;
    }

public:
    MS5837Provider(int sda_pin = 21, int scl_pin = 22)
        : sda(sda_pin), scl(scl_pin) {
        _instance = this;

        // –°–æ–∑–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if (i2cMutex == NULL) {
            i2cMutex = xSemaphoreCreateMutex();
            if (i2cMutex == NULL) {
                uartDebug("‚ùå Failed to create I2C mutex");
            }
        }
    }

    bool begin() override {
        if (initialized) {
            return true;
        }

        char buffer[100];
        sprintf(buffer, "‚ÑπÔ∏è MS5837 initialize sda: %d scl: %d", sda, scl);
        uartDebug(buffer);

        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Wire –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!wireInitialized) {
            uartDebug("üîß Initializing Wire...");

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            Wire.end();
            delay(100);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∏–Ω–æ–≤
            bool wireSuccess = Wire.begin(sda, scl);
            if (!wireSuccess) {
                uartDebug("‚ùå Wire.begin() failed!");
                return false;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—É—é —á–∞—Å—Ç–æ—Ç—É
            Wire.setClock(100000); // 100kHz
            Wire.setTimeout(1000);  // 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∞–π–º–∞—É—Ç

            wireInitialized = true;
            uartDebug("‚úÖ Wire initialized");
        }

        // –ü–æ–ª—É—á–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (xSemaphoreTake(i2cMutex, pdMS_TO_TICKS(2000)) != pdTRUE) {
            uartDebug("‚ùå Failed to acquire mutex for initialization");
            return false;
        }

        const int max_attempts = 5;
        int attempts = 0;
        bool initSuccess = false;

        while (attempts < max_attempts && !initSuccess) {
            attempts++;
            sprintf(buffer, "üîÑ MS5837 init attempt %d/%d", attempts, max_attempts);
            uartDebug(buffer);

            if (sensor.init()) {
                initSuccess = true;
                uartDebug("‚úÖ MS5837 sensor.init() successful");
            } else {
                sprintf(buffer, "‚ùå MS5837 init attempt %d failed", attempts);
                uartDebug(buffer);
                delay(1000); // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            }
        }

        xSemaphoreGive(i2cMutex);

        if (initSuccess) {
            uartDebug("üîß Setting MS5837 parameters...");
            sensor.setModel(MS5837::MS5837_30BA);
            sensor.setFluidDensity(997); // –ø—Ä–µ—Å–Ω–∞—è –≤–æ–¥–∞; 1029 –¥–ª—è –º–æ—Ä—Å–∫–æ–π
            initialized = true;
            uartDebug("‚úÖ MS5837 fully initialized");

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —á—Ç–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            delay(100); // –¥–∞–µ–º –¥–∞—Ç—á–∏–∫—É –≤—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            if (safeRead()) {
                sprintf(buffer, "üìä Initial reading - Temp: %.2f¬∞C, Depth: %.2fm",
                       sensor.temperature(), sensor.depth());
                uartDebug(buffer);
            } else {
                uartDebug("‚ö†Ô∏è Initial reading failed, but continuing...");
            }

            return true;
        } else {
            uartDebug("‚ùå MS5837 initialization failed completely");
            initialized = false;
            return false;
        }
    }

    float readTemperature() override {
        if (!initialized) {
            uartDebug("‚ùå MS5837 not initialized for temperature reading");
            return -999.0f; // –∫–æ–¥ –æ—à–∏–±–∫–∏
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        if (!(data_is_actual & TEMP_IS_ACTUAL)) {
            if (!safeRead()) {
                uartDebug("‚ùå Failed to update temperature data");
                return -999.0f;
            }
        }

        data_is_actual &= ~TEMP_IS_ACTUAL;
        float temp = sensor.temperature();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
        if (temp < -50.0f || temp > 100.0f) {
            uartDebug("‚ö†Ô∏è Temperature reading out of range");
            return -999.0f;
        }

        return temp;
    }

    float readDepth() override {
        if (!initialized) {
            uartDebug("‚ùå MS5837 not initialized for depth reading");
            return -999.0f;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        if (!(data_is_actual & DEPTH_IS_ACTUAL)) {
            if (!safeRead()) {
                uartDebug("‚ùå Failed to update depth data");
                return -999.0f;
            }
        }

        data_is_actual &= ~DEPTH_IS_ACTUAL;
        float depth = sensor.depth();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É 1000–º)
        if (depth < -10.0f || depth > 1000.0f) {
            char buffer[50];
            sprintf(buffer, "‚ö†Ô∏è Depth reading out of range: %.2f", depth);
            uartDebug(buffer);
            return -999.0f;
        }

        return depth;
    }

    // –°—Ç–∞—Ç—É—Å –¥–∞—Ç—á–∏–∫–∞
    bool isInitialized() const {
        return initialized;
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    bool forceUpdate() {
        data_is_actual = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        return safeRead();
    }

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞
    bool reinitialize() {
        uartDebug("üîÑ Reinitializing MS5837...");
        initialized = false;
        data_is_actual = 0;
        delay(100);
        return begin();
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ I2C —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    bool testConnection() {
        if (xSemaphoreTake(i2cMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
            return false;
        }

        Wire.beginTransmission(0x76); // –ê–¥—Ä–µ—Å MS5837 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        uint8_t error = Wire.endTransmission();

        xSemaphoreGive(i2cMutex);

        if (error == 0) {
            uartDebug("‚úÖ MS5837 I2C connection OK");
            return true;
        } else {
            char buffer[50];
            sprintf(buffer, "‚ùå MS5837 I2C error: %d", error);
            uartDebug(buffer);
            return false;
        }
    }

    ~MS5837Provider() {
        if (i2cMutex != NULL) {
            vSemaphoreDelete(i2cMutex);
            i2cMutex = NULL;
        }
    }
};
